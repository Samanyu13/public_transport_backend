#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('public-transport-backend:server');
var http = require('http');
let db = require('../models');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

db.sequelize.sync().then(function () {
  console.log('db synced');
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
})
  .catch((err) => {
    console.log(err);
  })


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * Setting ip socket connection with Node http server. 
 */

let io = require('socket.io')(server);

io.on('connect', function (socket) {
  // console.log("HANDSHAKE: " + JSON.stringify(socket.handshake));

  //EMPLOYEE ROOM CREATION
  socket.on('employeeCreatesRoom', function (room, ackFn) {
    let info = { 'success': false, 'status': 500, 'about': null };
    //A room with the same roomInfo exists
    console.log('Hi Laala: ' + io.sockets.adapter['rooms']);
    if (io.sockets.adapter.rooms[room]) {
      console.log('Room already exists..!');
      info.about = "Room already up..!";
    }
    else {
      info.about = "New room created..!";
      socket.join(room);
    }
    info.status = 200;
    info.success = true;
    console.log(info.about);
    console.log(io.sockets.adapter["rooms"]);
    ackFn(info);



  });

  //EMPLOYEE SENDS DATA
  socket.on('employeeSendsData', function (data, ackFn) {
    // let info = { 'success': false, 'status': 500, 'about': null };
    socket.broadcast.to(data.room).emit('locData', data.data);
    ackFn('Data Sent..!');
  });

  //EMPLOYEE CLOSING THE ROOM ON TRIP-END
  socket.on('tripEnd', function (room, ackFn) {
    let info = { 'success': false, 'status': 400, 'about': null };
    if (!(io.sockets.adapter.rooms[room])) {
      info.about = 'The room does not exist ..:|';
      ackFn(info);
    }
    else {
      console.log('EXISTS');
      //Disconnect all the clients on this room
      io.of('/').in(room).clients((err, socketIDs) => {
        if (err) {
          info.about = "Socket ID collection failed..!";
          ackFn(info);
          throw err;
        }
        socketIDs.forEach(socketID => io.sockets.sockets[socketID].leave(room));
        let info = { 'success': true, 'status': 200, 'about': 'Successfully removed the socket..!' };
        ackFn(info);
      });
    }
  });

  //USER'S ROOM JOIN
  socket.on('clientJoinsRoom', function (room, ackFn) {
    let info = { 'success': false, 'status': 400, 'about': null };
    if (!(io.sockets.adapter.rooms[room])) {
      info.about = 'Error..! Employee Room not found..! :(';
      ackFn(info);
    }
    else {
      socket.join(room);
      info.status = 200;
      info.success = true;
      info.about = "New User added..!";
      console.log(io.sockets.adapter["rooms"]);
      ackFn(info);
      console.log("New user added --> " + room);
    }
  });

  //USER LEAVES ROOM
  socket.on('clientLeavesRoom', function (room, ackFn) {
    socket.leave(room);
    ackFn({ 'success': true, 'status': 200, 'about': 'A user left..!' });
  });

});
